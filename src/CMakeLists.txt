PROJECT("CameraCalibration")
SET(CAMERACALIBRATION_VERSION_MAJOR 0)
SET(CAMERACALIBRATION_VERSION_MINOR 1)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/CMakeModules/)

FIND_PACKAGE(OpenGL REQUIRED)

FIND_PACKAGE(GLEW REQUIRED)
IF(GLEW_FOUND)
    SET(HAVE_GLEW 1)
    INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIR})
    MESSAGE("GLEW Found and Enabled")
ENDIF(GLEW_FOUND)

FIND_PACKAGE(FREEGLUT REQUIRED)
IF(FREEGLUT_FOUND)
  SET(HAVE_GLUT 1)
  INCLUDE_DIRECTORIES(${FREEGLUT_INCLUDE_DIR})
  #TARGET_LINK_LIBRARIES(${FREEGLUT_LIBRARY})
  MESSAGE("Freeglut Found and Enabled")
ENDIF(FREEGLUT_FOUND)

FIND_PACKAGE(Pangolin REQUIRED)
IF(Pangolin_FOUND)
    SET(HAVE_PANGOLIN 1)
    INCLUDE_DIRECTORIES(${Pangolin_INCLUDE_DIR})
    MESSAGE("Pangolin Found and Enabled")
ENDIF(Pangolin_FOUND)

FIND_PACKAGE(OpenCV REQUIRED)
IF(OpenCV_FOUND)
    SET(HAVE_OPENCV 1)
    INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIR})
    MESSAGE("OpenCV Found and Enabled")
ENDIF(OpenCV_FOUND)

IF(CMAKE_COMPILER_IS_GNUCXX )
  ADD_DEFINITIONS("-Wall -Wno-error=deprecated-declarations -Werror")
ENDIF()

# Overide with cmake -DCMAKE_BUILD_TYPE=Debug {dir}
IF( NOT CMAKE_BUILD_TYPE )
   MESSAGE("Build type not set (defaults to release)")
   MESSAGE("-DCMAKE_BUILD_TYPE=Debug for debug")
   SET( CMAKE_BUILD_TYPE Release )
ENDIF()

ADD_EXECUTABLE(opencv_calib opencv_calib.cpp)
TARGET_LINK_LIBRARIES(opencv_calib ${OpenCV_LIBS})

ADD_EXECUTABLE(stereo_calib stereo_calib.cpp )
TARGET_LINK_LIBRARIES(stereo_calib ${OpenCV_LIBS} ${Pangolin_LIBRARY} ${GLEW_LIBRARY})
